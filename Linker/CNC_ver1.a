;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0034 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0035 char status,data;
; 0000 0036 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0037 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0038 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0039    {
; 0000 003A    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003B #if RX_BUFFER_SIZE == 256
; 0000 003C    // special case for receiver buffer size=256
; 0000 003D    if (++rx_counter == 0)
; 0000 003E       {
; 0000 003F #else
; 0000 0040    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0041    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0042       {
; 0000 0043       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0044 #endif
; 0000 0045       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0046       }
; 0000 0047    }
;PCODE: $0000002A VOL: 0
; 0000 0048 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 004F {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0050 char data;
; 0000 0051 while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0052 data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0053 #if RX_BUFFER_SIZE != 256
; 0000 0054 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0055 #endif
; 0000 0056 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0057 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0058 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0059 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005A }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 006A {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006B if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006C    {
; 0000 006D    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 006E    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006F #if TX_BUFFER_SIZE != 256
; 0000 0070    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0071 #endif
; 0000 0072    }
;PCODE: $0000005A VOL: 0
; 0000 0073 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 007A {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007B while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007C #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 007D if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007E    {
; 0000 007F    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0080 #if TX_BUFFER_SIZE != 256
; 0000 0081    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0082 #endif
; 0000 0083    ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0084    }
; 0000 0085 else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0086    UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0087 #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 0088 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;
;#include <stdio.h>
;#include <delay.h>
;// Declare your global variables here
;unsigned short control_array_half_MotZ[8]={9,1,5,4,6,2,10,8};

	.DSEG
;unsigned char control_array_half_MotY[8]={0x90,0x10,0x50,0x40,0x60,0x20,0xa0,0x80};
;unsigned char control_array_half_MotX[8]={0x90,0x10,0x50,0x40,0x60,0x20,0xa0,0x80};
;
;
;#define led1 PORTD.5
;#define led2 PORTD.4
;#define led3 PORTD.6
;
;#define sw1 PIND.2
;#define sw2 PIND.3
;
;// Standard Input/Output functions
;void move_cw_motZ(unsigned int revolutions)
; 0000 009E {

	.CSEG
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009F  int i=0;
; 0000 00A0  for (i=0;i<revolutions;i++)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;	revolutions -> Y+2
;	i -> R16,R17
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A1  {
; 0000 00A2   PORTC=control_array_half_MotZ[i%8];
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A3   delay_ms(3);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A4  }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A5 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;void move_ccw_motZ(unsigned int revolutions)
; 0000 00A7 {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00A8  int i;
; 0000 00A9  for (i=revolutions;i>0;i--)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;	revolutions -> Y+2
;	i -> R16,R17
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00AA  {
; 0000 00AB   PORTC=control_array_half_MotZ[i%8];
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00AC   delay_ms(3);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00AD  }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AE }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;
;////////////////////////////////////////
;void move_cw_motY(unsigned int revolutions)
; 0000 00B2 {
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B3  int i=0;
; 0000 00B4  for (i=0;i<revolutions;i++)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;	revolutions -> Y+2
;	i -> R16,R17
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00B5  {
; 0000 00B6   PORTC=control_array_half_MotY[i%8];
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00B7   delay_ms(5);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00B8  }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B9 }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;void move_ccw_motY(unsigned int revolutions)
; 0000 00BB {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00BC  int i;
; 0000 00BD  for (i=revolutions;i>0;i--)
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;	revolutions -> Y+2
;	i -> R16,R17
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00BE  {
; 0000 00BF   PORTC=control_array_half_MotY[i%8];
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C0   delay_ms(5);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00C1  }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00C2 }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;////////////////////////////////////////
;void move_cw_motX(unsigned int revolutions)
; 0000 00C5 {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C6  int i=0;
; 0000 00C7  for (i=0;i<revolutions;i++)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;	revolutions -> Y+2
;	i -> R16,R17
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00C8  {
; 0000 00C9   PORTA=control_array_half_MotX[i%8];
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00CA   delay_ms(2);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00CB  }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00CC }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;void move_ccw_motX(unsigned int revolutions)
; 0000 00CE {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00CF  int i;
; 0000 00D0  for (i=revolutions;i>0;i--)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;	revolutions -> Y+2
;	i -> R16,R17
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00D1  {
; 0000 00D2   PORTA=control_array_half_MotX[i%8];
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00D3   delay_ms(2);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00D4  }
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00D5 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;
;void resetCNC(void)
; 0000 00D8 {
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00D9     move_cw_motX(530);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00DA     move_cw_motY(530);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00DB }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00DE {
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00DF // Place your code here
; 0000 00E0 if (!sw1) //reset
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00E1 {
; 0000 00E2     move_ccw_motX(530);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00E3     move_ccw_motY(530);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00E4 }
; 0000 00E5 
; 0000 00E6 }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;
;// Declare your global variables here
;unsigned char data=0;
;unsigned char DataX=0;
;unsigned char DataY=0;
;unsigned char DataZ=0;
;unsigned char DataStep=13;// accuracy 13 pulses -> 1 mm

	.DSEG
;
;void main(void)
; 0000 00F0 {

	.CSEG
;PCODE: $00000172 VOL: 0
; 0000 00F1 // Declare your local variables here
; 0000 00F2 
; 0000 00F3 PORTA=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00F4 DDRA=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00F5 
; 0000 00F6 PORTB=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00F7 DDRB=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00F8 
; 0000 00F9 PORTC=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00FA DDRC=0xFF;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00FB 
; 0000 00FC PORTD=0xBC;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00FD DDRD=0xB0;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00FE 
; 0000 00FF // Timer/Counter 0 initialization
; 0000 0100 // Clock source: System Clock
; 0000 0101 // Clock value: 7.813 kHz
; 0000 0102 // Mode: Normal top=0xFF
; 0000 0103 // OC0 output: Disconnected
; 0000 0104 TCCR0=0x05;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0105 TCNT0=0x00;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0106 OCR0=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0107 
; 0000 0108 TCCR1A=0x00;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0109 TCCR1B=0x00;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 010A TCNT1H=0x00;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 010B TCNT1L=0x00;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 010C ICR1H=0x00;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 010D ICR1L=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 010E OCR1AH=0x00;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 010F OCR1AL=0x00;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0110 OCR1BH=0x00;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0111 OCR1BL=0x00;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0112 
; 0000 0113 ASSR=0x00;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0114 TCCR2=0x00;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0115 TCNT2=0x00;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0116 OCR2=0x00;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0117 
; 0000 0118 MCUCR=0x00;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0119 MCUCSR=0x00;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 011A 
; 0000 011B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 011C TIMSK=0x01;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 011D 
; 0000 011E // USART initialization
; 0000 011F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0120 // USART Receiver: On
; 0000 0121 // USART Transmitter: On
; 0000 0122 // USART Mode: Asynchronous
; 0000 0123 // USART Baud Rate: 9600
; 0000 0124 UCSRA=0x00;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0125 UCSRB=0xD8;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0126 UCSRC=0x86;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0127 UBRRH=0x00;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0128 UBRRL=0x33;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0129 
; 0000 012A ACSR=0x80;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 012B SFIOR=0x00;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 012C 
; 0000 012D ADCSRA=0x00;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 012E 
; 0000 012F SPCR=0x00;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0130 
; 0000 0131 TWCR=0x00;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0132 
; 0000 0133 // Global enable interrupts
; 0000 0134 #asm("sei")
;PCODE: $000001BF VOL: 0
	sei
;PCODE: $000001C0 VOL: 0
; 0000 0135 
; 0000 0136 resetCNC();
;PCODE: $000001C1 VOL: 0
; 0000 0137 
; 0000 0138 while (1)
;PCODE: $000001C2 VOL: 0
; 0000 0139       {
; 0000 013A 
; 0000 013B led1=1;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 013C while (rx_counter==0);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 013D data=getchar();
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 013E 
; 0000 013F led1=0;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0140 DataX=0;DataY=0;DataZ=0;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0141 
; 0000 0142 switch (data) {
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0143     case 'a':
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0144     {
; 0000 0145 //    DataX=getchar();
; 0000 0146     move_cw_motX(DataStep);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0147     }
; 0000 0148     break;
;PCODE: $000001D9 VOL: 0
; 0000 0149 
; 0000 014A     case 'b':
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 014B     {
; 0000 014C //    DataX=getchar();
; 0000 014D     move_ccw_motX(DataStep);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 014E     }
; 0000 014F     break;
;PCODE: $000001E1 VOL: 0
; 0000 0150 /////////////////////
; 0000 0151     case 'c':
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0152     {
; 0000 0153 //    DataY=getchar();
; 0000 0154     move_cw_motY(DataStep);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0155     }
; 0000 0156     break;
;PCODE: $000001E9 VOL: 0
; 0000 0157 
; 0000 0158     case 'd':
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0159     {
; 0000 015A //    DataY=getchar();
; 0000 015B     move_ccw_motY(DataStep);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 015C     }
; 0000 015D     break;
;PCODE: $000001F1 VOL: 0
; 0000 015E /////////////////////
; 0000 015F     case 'e':
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0160     {
; 0000 0161 //    DataZ=getchar();
; 0000 0162     move_cw_motZ(DataStep);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0163     }
; 0000 0164     break;
;PCODE: $000001F9 VOL: 0
; 0000 0165 
; 0000 0166     case 'f':
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0167     {
; 0000 0168 //    DataZ=getchar();
; 0000 0169     move_ccw_motZ(DataStep);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 016A     }
; 0000 016B     break;
;PCODE: $00000201 VOL: 0
; 0000 016C 
; 0000 016D };
;PCODE: $00000202 VOL: 0
; 0000 016E 
; 0000 016F 
; 0000 0170 //       move_ccw_motY(530);
; 0000 0171 //       move_cw_motY(530);
; 0000 0172 //       move_ccw_motX(530);
; 0000 0173 //       move_cw_motX(530);
; 0000 0174 //       move_cw_motZ(30);
; 0000 0175 //       move_ccw_motZ(30);
; 0000 0176       }
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0177 }
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
