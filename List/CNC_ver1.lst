
AVRASM ver. 2.1.30  H:\Projects\CNC\MCU Program\List\CNC_ver1.asm Wed Apr 02 02:51:26 2014

H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1059): warning: Register r5 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1060): warning: Register r4 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1061): warning: Register r7 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1062): warning: Register r6 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1063): warning: Register r9 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1064): warning: Register r8 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1065): warning: Register r11 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1066): warning: Register r10 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1067): warning: Register r13 already defined by the .DEF directive
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1068): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16L
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16L
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF _data=R11
                 	.DEF _DataX=R10
                 	.DEF _DataY=R13
                 	.DEF _DataZ=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0122 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 008a 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 00bc 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x14:
000034 0009
000035 0001
000036 0005
000037 0004      	.DB  0x9,0x0,0x1,0x0,0x5,0x0,0x4,0x0
000038 0006
000039 0002
00003a 000a
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1111): warning: .cseg .db misalignment - padding zero byte
00003b 0008      	.DB  0x6,0x0,0x2,0x0,0xA,0x0,0x8
                 _0x15:
00003c 1090
00003d 4050
00003e 2060
00003f 80a0      	.DB  0x90,0x10,0x50,0x40,0x60,0x20,0xA0,0x80
                 _0x16:
000040 1090
000041 4050
000042 2060
000043 80a0      	.DB  0x90,0x10,0x50,0x40,0x60,0x20,0xA0,0x80
                 _0x2A:
H:\Projects\CNC\MCU Program\List\CNC_ver1.asm(1117): warning: .cseg .db misalignment - padding zero byte
000044 000d      	.DB  0xD
                 _0x40:
000045 0000
000046 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000047 0001      	.DW  0x01
000048 0002      	.DW  0x02
000049 0066      	.DW  __REG_BIT_VARS*2
                 
00004a 000f      	.DW  0x0F
00004b 0170      	.DW  _control_array_half_MotZ
00004c 0068      	.DW  _0x14*2
                 
00004d 0008      	.DW  0x08
00004e 0180      	.DW  _control_array_half_MotY
00004f 0078      	.DW  _0x15*2
                 
000050 0008      	.DW  0x08
000051 0188      	.DW  _control_array_half_MotX
000052 0080      	.DW  _0x16*2
                 
000053 0001      	.DW  0x01
000054 0190      	.DW  _DataStep
000055 0088      	.DW  _0x2A*2
                 
000056 0004      	.DW  0x04
000057 000a      	.DW  0x0A
000058 008a      	.DW  _0x40*2
                 
                 _0xFFFFFFFF:
000059 0000      	.DW  0
                 
                 __RESET:
00005a 94f8      	CLI
00005b 27ee      	CLR  R30
00005c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005d e0f1      	LDI  R31,1
00005e bffb      	OUT  GICR,R31
00005f bfeb      	OUT  GICR,R30
000060 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000061 e1f8      	LDI  R31,0x18
000062 bdf1      	OUT  WDTCR,R31
000063 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000064 e08d      	LDI  R24,(14-2)+1
000065 e0a2      	LDI  R26,2
000066 27bb      	CLR  R27
                 __CLEAR_REG:
000067 93ed      	ST   X+,R30
000068 958a      	DEC  R24
000069 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000082 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000083 bfed      	OUT  SPL,R30
000084 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000085 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000086 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000087 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000088 940c 0145 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _usart_rx_isr:
00008a 93ea      	ST   -Y,R30
00008b 93fa      	ST   -Y,R31
00008c b7ef      	IN   R30,SREG
00008d 93ea      	ST   -Y,R30
                 ; 0000 0035 char status,data;
                 ; 0000 0036 status=UCSRA;
00008e 931a      	ST   -Y,R17
00008f 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000090 b11b      	IN   R17,11
                 ; 0000 0037 data=UDR;
000091 b10c      	IN   R16,12
                 ; 0000 0038 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000092 2fe1      	MOV  R30,R17
000093 71ec      	ANDI R30,LOW(0x1C)
000094 f489      	BRNE _0x3
                 ; 0000 0039    {
                 ; 0000 003A    rx_buffer[rx_wr_index++]=data;
000095 2de5      	MOV  R30,R5
000096 9453      	INC  R5
000097 e0f0      	LDI  R31,0
000098 5ae0      	SUBI R30,LOW(-_rx_buffer)
000099 4ffe      	SBCI R31,HIGH(-_rx_buffer)
00009a 8300      	ST   Z,R16
                 ; 0000 003B #if RX_BUFFER_SIZE == 256
                 ; 0000 003C    // special case for receiver buffer size=256
                 ; 0000 003D    if (++rx_counter == 0)
                 ; 0000 003E       {
                 ; 0000 003F #else
                 ; 0000 0040    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00009b e0e8      	LDI  R30,LOW(8)
00009c 15e5      	CP   R30,R5
00009d f409      	BRNE _0x4
00009e 2455      	CLR  R5
                 ; 0000 0041    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00009f 9473      	INC  R7
0000a0 e0e8      	LDI  R30,LOW(8)
0000a1 15e7      	CP   R30,R7
0000a2 f419      	BRNE _0x5
                 ; 0000 0042       {
                 ; 0000 0043       rx_counter=0;
0000a3 2477      	CLR  R7
                 ; 0000 0044 #endif
                 ; 0000 0045       rx_buffer_overflow=1;
0000a4 9468      	SET
0000a5 f820      	BLD  R2,0
                 ; 0000 0046       }
                 ; 0000 0047    }
                 _0x5:
                 ; 0000 0048 }
                 _0x3:
0000a6 9109      	LD   R16,Y+
0000a7 9119      	LD   R17,Y+
0000a8 c025      	RJMP _0x3F
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 004F {
                 _getchar:
                 ; 0000 0050 char data;
                 ; 0000 0051 while (rx_counter==0);
0000a9 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
0000aa 2077      	TST  R7
0000ab f3f1      	BREQ _0x6
                 ; 0000 0052 data=rx_buffer[rx_rd_index++];
0000ac 2de4      	MOV  R30,R4
0000ad 9443      	INC  R4
0000ae e0f0      	LDI  R31,0
0000af 5ae0      	SUBI R30,LOW(-_rx_buffer)
0000b0 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0000b1 8110      	LD   R17,Z
                 ; 0000 0053 #if RX_BUFFER_SIZE != 256
                 ; 0000 0054 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000b2 e0e8      	LDI  R30,LOW(8)
0000b3 15e4      	CP   R30,R4
0000b4 f409      	BRNE _0x9
0000b5 2444      	CLR  R4
                 ; 0000 0055 #endif
                 ; 0000 0056 #asm("cli")
                 _0x9:
0000b6 94f8      	cli
                 ; 0000 0057 --rx_counter;
0000b7 947a      	DEC  R7
                 ; 0000 0058 #asm("sei")
0000b8 9478      	sei
                 ; 0000 0059 return data;
0000b9 2fe1      	MOV  R30,R17
0000ba 9119      	LD   R17,Y+
0000bb 9508      	RET
                 ; 0000 005A }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 006A {
                 _usart_tx_isr:
0000bc 93ea      	ST   -Y,R30
0000bd 93fa      	ST   -Y,R31
0000be b7ef      	IN   R30,SREG
0000bf 93ea      	ST   -Y,R30
                 ; 0000 006B if (tx_counter)
0000c0 2088      	TST  R8
0000c1 f061      	BREQ _0xA
                 ; 0000 006C    {
                 ; 0000 006D    --tx_counter;
0000c2 948a      	DEC  R8
                 ; 0000 006E    UDR=tx_buffer[tx_rd_index++];
0000c3 2de9      	MOV  R30,R9
0000c4 9493      	INC  R9
0000c5 e0f0      	LDI  R31,0
0000c6 59e8      	SUBI R30,LOW(-_tx_buffer)
0000c7 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000c8 81e0      	LD   R30,Z
0000c9 b9ec      	OUT  0xC,R30
                 ; 0000 006F #if TX_BUFFER_SIZE != 256
                 ; 0000 0070    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000ca e0e8      	LDI  R30,LOW(8)
0000cb 15e9      	CP   R30,R9
0000cc f409      	BRNE _0xB
0000cd 2499      	CLR  R9
                 ; 0000 0071 #endif
                 ; 0000 0072    }
                 _0xB:
                 ; 0000 0073 }
                 _0xA:
                 _0x3F:
0000ce 91e9      	LD   R30,Y+
0000cf bfef      	OUT  SREG,R30
0000d0 91f9      	LD   R31,Y+
0000d1 91e9      	LD   R30,Y+
0000d2 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 007A {
                 ; 0000 007B while (tx_counter == TX_BUFFER_SIZE);
                 ;	c -> Y+0
                 ; 0000 007C #asm("cli")
                 ; 0000 007D if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
                 ; 0000 007E    {
                 ; 0000 007F    tx_buffer[tx_wr_index++]=c;
                 ; 0000 0080 #if TX_BUFFER_SIZE != 256
                 ; 0000 0081    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ; 0000 0082 #endif
                 ; 0000 0083    ++tx_counter;
                 ; 0000 0084    }
                 ; 0000 0085 else
                 ; 0000 0086    UDR=c;
                 ; 0000 0087 #asm("sei")
                 ; 0000 0088 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;unsigned short control_array_half_MotZ[8]={9,1,5,4,6,2,10,8};
                 
                 	.DSEG
                 ;unsigned char control_array_half_MotY[8]={0x90,0x10,0x50,0x40,0x60,0x20,0xa0,0x80};
                 ;unsigned char control_array_half_MotX[8]={0x90,0x10,0x50,0x40,0x60,0x20,0xa0,0x80};
                 ;
                 ;
                 ;#define led1 PORTD.5
                 ;#define led2 PORTD.4
                 ;#define led3 PORTD.6
                 ;
                 ;#define sw1 PIND.2
                 ;#define sw2 PIND.3
                 ;
                 ;// Standard Input/Output functions
                 ;void move_cw_motZ(unsigned int revolutions)
                 ; 0000 009E {
                 
                 	.CSEG
                 _move_cw_motZ:
                 ; 0000 009F  int i=0;
                 ; 0000 00A0  for (i=0;i<revolutions;i++)
0000d3 940e 01b7 	CALL SUBOPT_0x0
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x18:
0000d5 940e 01be 	CALL SUBOPT_0x1
0000d7 f428      	BRSH _0x19
                 ; 0000 00A1  {
                 ; 0000 00A2   PORTC=control_array_half_MotZ[i%8];
0000d8 940e 01c3 	CALL SUBOPT_0x2
                 ; 0000 00A3   delay_ms(3);
                 ; 0000 00A4  }
                +
0000da 5f0f     +SUBI R16 , LOW ( - 1 )
0000db 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000dc cff8      	RJMP _0x18
                 _0x19:
                 ; 0000 00A5 }
0000dd c039      	RJMP _0x2060001
                 ;void move_ccw_motZ(unsigned int revolutions)
                 ; 0000 00A7 {
                 _move_ccw_motZ:
                 ; 0000 00A8  int i;
                 ; 0000 00A9  for (i=revolutions;i>0;i--)
0000de 940e 01d6 	CALL SUBOPT_0x3
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x1B:
0000e0 2400      	CLR  R0
0000e1 1600      	CP   R0,R16
0000e2 0601      	CPC  R0,R17
0000e3 f42c      	BRGE _0x1C
                 ; 0000 00AA  {
                 ; 0000 00AB   PORTC=control_array_half_MotZ[i%8];
0000e4 940e 01c3 	CALL SUBOPT_0x2
                 ; 0000 00AC   delay_ms(3);
                 ; 0000 00AD  }
                +
0000e6 5001     +SUBI R16 , LOW ( 1 )
0000e7 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000e8 cff7      	RJMP _0x1B
                 _0x1C:
                 ; 0000 00AE }
0000e9 c02d      	RJMP _0x2060001
                 ;
                 ;////////////////////////////////////////
                 ;void move_cw_motY(unsigned int revolutions)
                 ; 0000 00B2 {
                 _move_cw_motY:
                 ; 0000 00B3  int i=0;
                 ; 0000 00B4  for (i=0;i<revolutions;i++)
0000ea 940e 01b7 	CALL SUBOPT_0x0
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x1E:
0000ec 940e 01be 	CALL SUBOPT_0x1
0000ee f428      	BRSH _0x1F
                 ; 0000 00B5  {
                 ; 0000 00B6   PORTC=control_array_half_MotY[i%8];
0000ef 940e 01db 	CALL SUBOPT_0x4
                 ; 0000 00B7   delay_ms(5);
                 ; 0000 00B8  }
                +
0000f1 5f0f     +SUBI R16 , LOW ( - 1 )
0000f2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000f3 cff8      	RJMP _0x1E
                 _0x1F:
                 ; 0000 00B9 }
0000f4 c022      	RJMP _0x2060001
                 ;void move_ccw_motY(unsigned int revolutions)
                 ; 0000 00BB {
                 _move_ccw_motY:
                 ; 0000 00BC  int i;
                 ; 0000 00BD  for (i=revolutions;i>0;i--)
0000f5 940e 01d6 	CALL SUBOPT_0x3
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x21:
0000f7 2400      	CLR  R0
0000f8 1600      	CP   R0,R16
0000f9 0601      	CPC  R0,R17
0000fa f42c      	BRGE _0x22
                 ; 0000 00BE  {
                 ; 0000 00BF   PORTC=control_array_half_MotY[i%8];
0000fb 940e 01db 	CALL SUBOPT_0x4
                 ; 0000 00C0   delay_ms(5);
                 ; 0000 00C1  }
                +
0000fd 5001     +SUBI R16 , LOW ( 1 )
0000fe 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000ff cff7      	RJMP _0x21
                 _0x22:
                 ; 0000 00C2 }
000100 c016      	RJMP _0x2060001
                 ;////////////////////////////////////////
                 ;void move_cw_motX(unsigned int revolutions)
                 ; 0000 00C5 {
                 _move_cw_motX:
                 ; 0000 00C6  int i=0;
                 ; 0000 00C7  for (i=0;i<revolutions;i++)
000101 940e 01b7 	CALL SUBOPT_0x0
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x24:
000103 940e 01be 	CALL SUBOPT_0x1
000105 f428      	BRSH _0x25
                 ; 0000 00C8  {
                 ; 0000 00C9   PORTA=control_array_half_MotX[i%8];
000106 940e 01ea 	CALL SUBOPT_0x5
                 ; 0000 00CA   delay_ms(2);
                 ; 0000 00CB  }
                +
000108 5f0f     +SUBI R16 , LOW ( - 1 )
000109 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00010a cff8      	RJMP _0x24
                 _0x25:
                 ; 0000 00CC }
00010b c00b      	RJMP _0x2060001
                 ;void move_ccw_motX(unsigned int revolutions)
                 ; 0000 00CE {
                 _move_ccw_motX:
                 ; 0000 00CF  int i;
                 ; 0000 00D0  for (i=revolutions;i>0;i--)
00010c 940e 01d6 	CALL SUBOPT_0x3
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x27:
00010e 2400      	CLR  R0
00010f 1600      	CP   R0,R16
000110 0601      	CPC  R0,R17
000111 f42c      	BRGE _0x28
                 ; 0000 00D1  {
                 ; 0000 00D2   PORTA=control_array_half_MotX[i%8];
000112 940e 01ea 	CALL SUBOPT_0x5
                 ; 0000 00D3   delay_ms(2);
                 ; 0000 00D4  }
                +
000114 5001     +SUBI R16 , LOW ( 1 )
000115 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
000116 cff7      	RJMP _0x27
                 _0x28:
                 ; 0000 00D5 }
                 _0x2060001:
000117 8119      	LDD  R17,Y+1
000118 8108      	LDD  R16,Y+0
000119 9624      	ADIW R28,4
00011a 9508      	RET
                 ;
                 ;void resetCNC(void)
                 ; 0000 00D8 {
                 _resetCNC:
                 ; 0000 00D9     move_cw_motX(530);
00011b 940e 01f9 	CALL SUBOPT_0x6
00011d dfe3      	RCALL _move_cw_motX
                 ; 0000 00DA     move_cw_motY(530);
00011e 940e 01f9 	CALL SUBOPT_0x6
000120 dfc9      	RCALL _move_cw_motY
                 ; 0000 00DB }
000121 9508      	RET
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00DE {
                 _timer0_ovf_isr:
000122 920a      	ST   -Y,R0
000123 921a      	ST   -Y,R1
000124 92fa      	ST   -Y,R15
000125 936a      	ST   -Y,R22
000126 937a      	ST   -Y,R23
000127 938a      	ST   -Y,R24
000128 939a      	ST   -Y,R25
000129 93aa      	ST   -Y,R26
00012a 93ba      	ST   -Y,R27
00012b 93ea      	ST   -Y,R30
00012c 93fa      	ST   -Y,R31
00012d b7ef      	IN   R30,SREG
00012e 93ea      	ST   -Y,R30
                 ; 0000 00DF // Place your code here
                 ; 0000 00E0 if (!sw1) //reset
00012f 9982      	SBIC 0x10,2
000130 c006      	RJMP _0x29
                 ; 0000 00E1 {
                 ; 0000 00E2     move_ccw_motX(530);
000131 940e 01f9 	CALL SUBOPT_0x6
000133 dfd8      	RCALL _move_ccw_motX
                 ; 0000 00E3     move_ccw_motY(530);
000134 940e 01f9 	CALL SUBOPT_0x6
000136 dfbe      	RCALL _move_ccw_motY
                 ; 0000 00E4 }
                 ; 0000 00E5 
                 ; 0000 00E6 }
                 _0x29:
000137 91e9      	LD   R30,Y+
000138 bfef      	OUT  SREG,R30
000139 91f9      	LD   R31,Y+
00013a 91e9      	LD   R30,Y+
00013b 91b9      	LD   R27,Y+
00013c 91a9      	LD   R26,Y+
00013d 9199      	LD   R25,Y+
00013e 9189      	LD   R24,Y+
00013f 9179      	LD   R23,Y+
000140 9169      	LD   R22,Y+
000141 90f9      	LD   R15,Y+
000142 9019      	LD   R1,Y+
000143 9009      	LD   R0,Y+
000144 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;unsigned char data=0;
                 ;unsigned char DataX=0;
                 ;unsigned char DataY=0;
                 ;unsigned char DataZ=0;
                 ;unsigned char DataStep=13;// accuracy 13 pulses -> 1 mm
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 00F0 {
                 
                 	.CSEG
                 _main:
                 ; 0000 00F1 // Declare your local variables here
                 ; 0000 00F2 
                 ; 0000 00F3 PORTA=0x00;
000145 e0e0      	LDI  R30,LOW(0)
000146 bbeb      	OUT  0x1B,R30
                 ; 0000 00F4 DDRA=0x00;
000147 bbea      	OUT  0x1A,R30
                 ; 0000 00F5 
                 ; 0000 00F6 PORTB=0x00;
000148 bbe8      	OUT  0x18,R30
                 ; 0000 00F7 DDRB=0x00;
000149 bbe7      	OUT  0x17,R30
                 ; 0000 00F8 
                 ; 0000 00F9 PORTC=0x00;
00014a bbe5      	OUT  0x15,R30
                 ; 0000 00FA DDRC=0xFF;
00014b efef      	LDI  R30,LOW(255)
00014c bbe4      	OUT  0x14,R30
                 ; 0000 00FB 
                 ; 0000 00FC PORTD=0xBC;
00014d ebec      	LDI  R30,LOW(188)
00014e bbe2      	OUT  0x12,R30
                 ; 0000 00FD DDRD=0xB0;
00014f ebe0      	LDI  R30,LOW(176)
000150 bbe1      	OUT  0x11,R30
                 ; 0000 00FE 
                 ; 0000 00FF // Timer/Counter 0 initialization
                 ; 0000 0100 // Clock source: System Clock
                 ; 0000 0101 // Clock value: 7.813 kHz
                 ; 0000 0102 // Mode: Normal top=0xFF
                 ; 0000 0103 // OC0 output: Disconnected
                 ; 0000 0104 TCCR0=0x05;
000151 e0e5      	LDI  R30,LOW(5)
000152 bfe3      	OUT  0x33,R30
                 ; 0000 0105 TCNT0=0x00;
000153 e0e0      	LDI  R30,LOW(0)
000154 bfe2      	OUT  0x32,R30
                 ; 0000 0106 OCR0=0x00;
000155 bfec      	OUT  0x3C,R30
                 ; 0000 0107 
                 ; 0000 0108 TCCR1A=0x00;
000156 bdef      	OUT  0x2F,R30
                 ; 0000 0109 TCCR1B=0x00;
000157 bdee      	OUT  0x2E,R30
                 ; 0000 010A TCNT1H=0x00;
000158 bded      	OUT  0x2D,R30
                 ; 0000 010B TCNT1L=0x00;
000159 bdec      	OUT  0x2C,R30
                 ; 0000 010C ICR1H=0x00;
00015a bde7      	OUT  0x27,R30
                 ; 0000 010D ICR1L=0x00;
00015b bde6      	OUT  0x26,R30
                 ; 0000 010E OCR1AH=0x00;
00015c bdeb      	OUT  0x2B,R30
                 ; 0000 010F OCR1AL=0x00;
00015d bdea      	OUT  0x2A,R30
                 ; 0000 0110 OCR1BH=0x00;
00015e bde9      	OUT  0x29,R30
                 ; 0000 0111 OCR1BL=0x00;
00015f bde8      	OUT  0x28,R30
                 ; 0000 0112 
                 ; 0000 0113 ASSR=0x00;
000160 bde2      	OUT  0x22,R30
                 ; 0000 0114 TCCR2=0x00;
000161 bde5      	OUT  0x25,R30
                 ; 0000 0115 TCNT2=0x00;
000162 bde4      	OUT  0x24,R30
                 ; 0000 0116 OCR2=0x00;
000163 bde3      	OUT  0x23,R30
                 ; 0000 0117 
                 ; 0000 0118 MCUCR=0x00;
000164 bfe5      	OUT  0x35,R30
                 ; 0000 0119 MCUCSR=0x00;
000165 bfe4      	OUT  0x34,R30
                 ; 0000 011A 
                 ; 0000 011B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 011C TIMSK=0x01;
000166 e0e1      	LDI  R30,LOW(1)
000167 bfe9      	OUT  0x39,R30
                 ; 0000 011D 
                 ; 0000 011E // USART initialization
                 ; 0000 011F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0120 // USART Receiver: On
                 ; 0000 0121 // USART Transmitter: On
                 ; 0000 0122 // USART Mode: Asynchronous
                 ; 0000 0123 // USART Baud Rate: 9600
                 ; 0000 0124 UCSRA=0x00;
000168 e0e0      	LDI  R30,LOW(0)
000169 b9eb      	OUT  0xB,R30
                 ; 0000 0125 UCSRB=0xD8;
00016a ede8      	LDI  R30,LOW(216)
00016b b9ea      	OUT  0xA,R30
                 ; 0000 0126 UCSRC=0x86;
00016c e8e6      	LDI  R30,LOW(134)
00016d bde0      	OUT  0x20,R30
                 ; 0000 0127 UBRRH=0x00;
00016e e0e0      	LDI  R30,LOW(0)
00016f bde0      	OUT  0x20,R30
                 ; 0000 0128 UBRRL=0x33;
000170 e3e3      	LDI  R30,LOW(51)
000171 b9e9      	OUT  0x9,R30
                 ; 0000 0129 
                 ; 0000 012A ACSR=0x80;
000172 e8e0      	LDI  R30,LOW(128)
000173 b9e8      	OUT  0x8,R30
                 ; 0000 012B SFIOR=0x00;
000174 e0e0      	LDI  R30,LOW(0)
000175 bfe0      	OUT  0x30,R30
                 ; 0000 012C 
                 ; 0000 012D ADCSRA=0x00;
000176 b9e6      	OUT  0x6,R30
                 ; 0000 012E 
                 ; 0000 012F SPCR=0x00;
000177 b9ed      	OUT  0xD,R30
                 ; 0000 0130 
                 ; 0000 0131 TWCR=0x00;
000178 bfe6      	OUT  0x36,R30
                 ; 0000 0132 
                 ; 0000 0133 // Global enable interrupts
                 ; 0000 0134 #asm("sei")
000179 9478      	sei
                 ; 0000 0135 
                 ; 0000 0136 resetCNC();
00017a dfa0      	RCALL _resetCNC
                 ; 0000 0137 
                 ; 0000 0138 while (1)
                 _0x2B:
                 ; 0000 0139       {
                 ; 0000 013A 
                 ; 0000 013B led1=1;
00017b 9a95      	SBI  0x12,5
                 ; 0000 013C while (rx_counter==0);
                 _0x30:
00017c 2077      	TST  R7
00017d f3f1      	BREQ _0x30
                 ; 0000 013D data=getchar();
00017e df2a      	RCALL _getchar
00017f 2ebe      	MOV  R11,R30
                 ; 0000 013E 
                 ; 0000 013F led1=0;
000180 9895      	CBI  0x12,5
                 ; 0000 0140 DataX=0;DataY=0;DataZ=0;
000181 24aa      	CLR  R10
000182 24dd      	CLR  R13
000183 24cc      	CLR  R12
                 ; 0000 0141 
                 ; 0000 0142 switch (data) {
000184 2deb      	MOV  R30,R11
000185 e0f0      	LDI  R31,0
                 ; 0000 0143     case 'a':
000186 36e1      	CPI  R30,LOW(0x61)
000187 e0a0      	LDI  R26,HIGH(0x61)
000188 07fa      	CPC  R31,R26
000189 f421      	BRNE _0x38
                 ; 0000 0144     {
                 ; 0000 0145 //    DataX=getchar();
                 ; 0000 0146     move_cw_motX(DataStep);
00018a 940e 01fe 	CALL SUBOPT_0x7
00018c df74      	RCALL _move_cw_motX
                 ; 0000 0147     }
                 ; 0000 0148     break;
00018d c027      	RJMP _0x37
                 ; 0000 0149 
                 ; 0000 014A     case 'b':
                 _0x38:
00018e 36e2      	CPI  R30,LOW(0x62)
00018f e0a0      	LDI  R26,HIGH(0x62)
000190 07fa      	CPC  R31,R26
000191 f421      	BRNE _0x39
                 ; 0000 014B     {
                 ; 0000 014C //    DataX=getchar();
                 ; 0000 014D     move_ccw_motX(DataStep);
000192 940e 01fe 	CALL SUBOPT_0x7
000194 df77      	RCALL _move_ccw_motX
                 ; 0000 014E     }
                 ; 0000 014F     break;
000195 c01f      	RJMP _0x37
                 ; 0000 0150 /////////////////////
                 ; 0000 0151     case 'c':
                 _0x39:
000196 36e3      	CPI  R30,LOW(0x63)
000197 e0a0      	LDI  R26,HIGH(0x63)
000198 07fa      	CPC  R31,R26
000199 f421      	BRNE _0x3A
                 ; 0000 0152     {
                 ; 0000 0153 //    DataY=getchar();
                 ; 0000 0154     move_cw_motY(DataStep);
00019a 940e 01fe 	CALL SUBOPT_0x7
00019c df4d      	RCALL _move_cw_motY
                 ; 0000 0155     }
                 ; 0000 0156     break;
00019d c017      	RJMP _0x37
                 ; 0000 0157 
                 ; 0000 0158     case 'd':
                 _0x3A:
00019e 36e4      	CPI  R30,LOW(0x64)
00019f e0a0      	LDI  R26,HIGH(0x64)
0001a0 07fa      	CPC  R31,R26
0001a1 f421      	BRNE _0x3B
                 ; 0000 0159     {
                 ; 0000 015A //    DataY=getchar();
                 ; 0000 015B     move_ccw_motY(DataStep);
0001a2 940e 01fe 	CALL SUBOPT_0x7
0001a4 df50      	RCALL _move_ccw_motY
                 ; 0000 015C     }
                 ; 0000 015D     break;
0001a5 c00f      	RJMP _0x37
                 ; 0000 015E /////////////////////
                 ; 0000 015F     case 'e':
                 _0x3B:
0001a6 36e5      	CPI  R30,LOW(0x65)
0001a7 e0a0      	LDI  R26,HIGH(0x65)
0001a8 07fa      	CPC  R31,R26
0001a9 f421      	BRNE _0x3C
                 ; 0000 0160     {
                 ; 0000 0161 //    DataZ=getchar();
                 ; 0000 0162     move_cw_motZ(DataStep);
0001aa 940e 01fe 	CALL SUBOPT_0x7
0001ac df26      	RCALL _move_cw_motZ
                 ; 0000 0163     }
                 ; 0000 0164     break;
0001ad c007      	RJMP _0x37
                 ; 0000 0165 
                 ; 0000 0166     case 'f':
                 _0x3C:
0001ae 36e6      	CPI  R30,LOW(0x66)
0001af e0a0      	LDI  R26,HIGH(0x66)
0001b0 07fa      	CPC  R31,R26
0001b1 f419      	BRNE _0x37
                 ; 0000 0167     {
                 ; 0000 0168 //    DataZ=getchar();
                 ; 0000 0169     move_ccw_motZ(DataStep);
0001b2 940e 01fe 	CALL SUBOPT_0x7
0001b4 df29      	RCALL _move_ccw_motZ
                 ; 0000 016A     }
                 ; 0000 016B     break;
                 ; 0000 016C 
                 ; 0000 016D };
                 _0x37:
                 ; 0000 016E 
                 ; 0000 016F 
                 ; 0000 0170 //       move_ccw_motY(530);
                 ; 0000 0171 //       move_cw_motY(530);
                 ; 0000 0172 //       move_ccw_motX(530);
                 ; 0000 0173 //       move_cw_motX(530);
                 ; 0000 0174 //       move_cw_motZ(30);
                 ; 0000 0175 //       move_ccw_motZ(30);
                 ; 0000 0176       }
0001b5 cfc5      	RJMP _0x2B
                 ; 0000 0177 }
                 _0x3E:
0001b6 cfff      	RJMP _0x3E
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _tx_buffer:
000168           	.BYTE 0x8
                 _control_array_half_MotZ:
000170           	.BYTE 0x10
                 _control_array_half_MotY:
000180           	.BYTE 0x8
                 _control_array_half_MotX:
000188           	.BYTE 0x8
                 _DataStep:
000190           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0001b7 931a      	ST   -Y,R17
0001b8 930a      	ST   -Y,R16
                +
0001b9 e000     +LDI R16 , LOW ( 0 )
0001ba e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001bb e000     +LDI R16 , LOW ( 0 )
0001bc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0001bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001be 81ea      	LDD  R30,Y+2
0001bf 81fb      	LDD  R31,Y+2+1
0001c0 170e      	CP   R16,R30
0001c1 071f      	CPC  R17,R31
0001c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2:
0001c3 01d8      	MOVW R26,R16
0001c4 e0e8      	LDI  R30,LOW(8)
0001c5 e0f0      	LDI  R31,HIGH(8)
0001c6 940e 0227 	CALL __MODW21
0001c8 e7a0      	LDI  R26,LOW(_control_array_half_MotZ)
0001c9 e0b1      	LDI  R27,HIGH(_control_array_half_MotZ)
0001ca 0fee      	LSL  R30
0001cb 1fff      	ROL  R31
0001cc 0fae      	ADD  R26,R30
0001cd 1fbf      	ADC  R27,R31
0001ce 91ec      	LD   R30,X
0001cf bbe5      	OUT  0x15,R30
0001d0 e0e3      	LDI  R30,LOW(3)
0001d1 e0f0      	LDI  R31,HIGH(3)
0001d2 93fa      	ST   -Y,R31
0001d3 93ea      	ST   -Y,R30
0001d4 940c 0204 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001d6 931a      	ST   -Y,R17
0001d7 930a      	ST   -Y,R16
                +
0001d8 810a     +LDD R16 , Y + 2
0001d9 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
0001da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
0001db 01d8      	MOVW R26,R16
0001dc e0e8      	LDI  R30,LOW(8)
0001dd e0f0      	LDI  R31,HIGH(8)
0001de 940e 0227 	CALL __MODW21
0001e0 58e0      	SUBI R30,LOW(-_control_array_half_MotY)
0001e1 4ffe      	SBCI R31,HIGH(-_control_array_half_MotY)
0001e2 81e0      	LD   R30,Z
0001e3 bbe5      	OUT  0x15,R30
0001e4 e0e5      	LDI  R30,LOW(5)
0001e5 e0f0      	LDI  R31,HIGH(5)
0001e6 93fa      	ST   -Y,R31
0001e7 93ea      	ST   -Y,R30
0001e8 940c 0204 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
0001ea 01d8      	MOVW R26,R16
0001eb e0e8      	LDI  R30,LOW(8)
0001ec e0f0      	LDI  R31,HIGH(8)
0001ed 940e 0227 	CALL __MODW21
0001ef 57e8      	SUBI R30,LOW(-_control_array_half_MotX)
0001f0 4ffe      	SBCI R31,HIGH(-_control_array_half_MotX)
0001f1 81e0      	LD   R30,Z
0001f2 bbeb      	OUT  0x1B,R30
0001f3 e0e2      	LDI  R30,LOW(2)
0001f4 e0f0      	LDI  R31,HIGH(2)
0001f5 93fa      	ST   -Y,R31
0001f6 93ea      	ST   -Y,R30
0001f7 940c 0204 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0001f9 e1e2      	LDI  R30,LOW(530)
0001fa e0f2      	LDI  R31,HIGH(530)
0001fb 93fa      	ST   -Y,R31
0001fc 93ea      	ST   -Y,R30
0001fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x7:
0001fe 91e0 0190 	LDS  R30,_DataStep
000200 e0f0      	LDI  R31,0
000201 93fa      	ST   -Y,R31
000202 93ea      	ST   -Y,R30
000203 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000204 91e9      	ld   r30,y+
000205 91f9      	ld   r31,y+
000206 9630      	adiw r30,0
000207 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000208 ed80     +LDI R24 , LOW ( 0x7D0 )
000209 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00020a 9701     +SBIW R24 , 1
00020b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00020c 95a8      	wdr
00020d 9731      	sbiw r30,1
00020e f7c9      	brne __delay_ms0
                 __delay_ms1:
00020f 9508      	ret
                 
                 __ANEGW1:
000210 95f1      	NEG  R31
000211 95e1      	NEG  R30
000212 40f0      	SBCI R31,0
000213 9508      	RET
                 
                 __DIVW21U:
000214 2400      	CLR  R0
000215 2411      	CLR  R1
000216 e190      	LDI  R25,16
                 __DIVW21U1:
000217 0faa      	LSL  R26
000218 1fbb      	ROL  R27
000219 1c00      	ROL  R0
00021a 1c11      	ROL  R1
00021b 1a0e      	SUB  R0,R30
00021c 0a1f      	SBC  R1,R31
00021d f418      	BRCC __DIVW21U2
00021e 0e0e      	ADD  R0,R30
00021f 1e1f      	ADC  R1,R31
000220 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000221 60a1      	SBR  R26,1
                 __DIVW21U3:
000222 959a      	DEC  R25
000223 f799      	BRNE __DIVW21U1
000224 01fd      	MOVW R30,R26
000225 01d0      	MOVW R26,R0
000226 9508      	RET
                 
                 __MODW21:
000227 94e8      	CLT
000228 ffb7      	SBRS R27,7
000229 c004      	RJMP __MODW211
00022a 95a0      	COM  R26
00022b 95b0      	COM  R27
00022c 9611      	ADIW R26,1
00022d 9468      	SET
                 __MODW211:
00022e fdf7      	SBRC R31,7
00022f dfe0      	RCALL __ANEGW1
000230 dfe3      	RCALL __DIVW21U
000231 01fd      	MOVW R30,R26
000232 f40e      	BRTC __MODW212
000233 dfdc      	RCALL __ANEGW1
                 __MODW212:
000234 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16L register use summary:
r0 :  20 r1 :   7 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   6 
r8 :   2 r9 :   4 r10:   1 r11:   2 r12:   1 r13:   1 r14:   0 r15:   2 
r16:  23 r17:  24 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   7 r26:  29 r27:   9 r28:   2 r29:   1 r30: 142 r31:  48 
x  :   4 y  :  61 z  :  12 
Registers used: 28 out of 35 (80.0%)

ATmega16L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  28 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  14 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   8 cpc   :  10 cpi   :   6 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   4 jmp   :  25 ld    :  25 ldd   :   6 ldi   :  65 
lds   :   1 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   7 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  52 pop   :   0 push  :   0 rcall :  15 ret   :  12 
reti  :   2 rjmp  :  23 rol   :   4 ror   :   0 sbc   :   1 sbci  :  12 
sbi   :   1 sbic  :   1 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  39 std   :   0 sts   :   0 sub   :   1 subi  :  11 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega16L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00046a   1034     96   1130   16384   6.9%
[.dseg] 0x000060 0x000191      0     49     49    1119   4.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
