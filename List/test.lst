
AVRASM ver. 2.1.30  H:\Projects\CNC\MCU Program\List\test.asm Tue Apr 01 00:20:18 2014

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16L
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16L
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 0009
00002b 0001
00002c 0005
00002d 0004      	.DB  0x9,0x0,0x1,0x0,0x5,0x0,0x4,0x0
00002e 0006
00002f 0002
000030 000a
H:\Projects\CNC\MCU Program\List\test.asm(1089): warning: .cseg .db misalignment - padding zero byte
000031 0008      	.DB  0x6,0x0,0x2,0x0,0xA,0x0,0x8
                 _0x4:
000032 1090
000033 4050
000034 2060
000035 80a0      	.DB  0x90,0x10,0x50,0x40,0x60,0x20,0xA0,0x80
                 _0x5:
000036 1090
000037 4050
000038 2060
000039 80a0      	.DB  0x90,0x10,0x50,0x40,0x60,0x20,0xA0,0x80
                 
                 __GLOBAL_INI_TBL:
00003a 000f      	.DW  0x0F
00003b 0160      	.DW  _control_array_half_MotZ
00003c 0054      	.DW  _0x3*2
                 
00003d 0008      	.DW  0x08
00003e 0170      	.DW  _control_array_half_MotY
00003f 0064      	.DW  _0x4*2
                 
000040 0008      	.DW  0x08
000041 0178      	.DW  _control_array_half_MotX
000042 006c      	.DW  _0x5*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004b e1f8      	LDI  R31,0x18
00004c bdf1      	OUT  WDTCR,R31
00004d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 00ad 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned short control_array_half_MotZ[8]={9,1,5,4,6,2,10,8};
                 
                 	.DSEG
                 ;unsigned char control_array_half_MotY[8]={0x90,0x10,0x50,0x40,0x60,0x20,0xa0,0x80};
                 ;unsigned char control_array_half_MotX[8]={0x90,0x10,0x50,0x40,0x60,0x20,0xa0,0x80};
                 ;
                 ;//float Min_Step=1.8;
                 ;
                 ;void move_cw_motZ(unsigned int revolutions)
                 ; 0000 000C {
                 
                 	.CSEG
                 _move_cw_motZ:
                 ; 0000 000D  int i=0;
                 ; 0000 000E  for (i=0;i<revolutions;i++)
000074 d077      	RCALL SUBOPT_0x0
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x7:
000075 d07d      	RCALL SUBOPT_0x1
000076 f420      	BRSH _0x8
                 ; 0000 000F  {
                 ; 0000 0010   PORTC=control_array_half_MotZ[i%8];
000077 d080      	RCALL SUBOPT_0x2
                 ; 0000 0011   delay_ms(3);
                 ; 0000 0012  }
                +
000078 5f0f     +SUBI R16 , LOW ( - 1 )
000079 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00007a cffa      	RJMP _0x7
                 _0x8:
                 ; 0000 0013 }
00007b c02d      	RJMP _0x2000001
                 ;void move_ccw_motZ(unsigned int revolutions)
                 ; 0000 0015 {
                 _move_ccw_motZ:
                 ; 0000 0016  int i;
                 ; 0000 0017  for (i=revolutions;i>0;i--)
00007c d08e      	RCALL SUBOPT_0x3
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0xA:
00007d 2400      	CLR  R0
00007e 1600      	CP   R0,R16
00007f 0601      	CPC  R0,R17
000080 f424      	BRGE _0xB
                 ; 0000 0018  {
                 ; 0000 0019   PORTC=control_array_half_MotZ[i%8];
000081 d076      	RCALL SUBOPT_0x2
                 ; 0000 001A   delay_ms(3);
                 ; 0000 001B  }
                +
000082 5001     +SUBI R16 , LOW ( 1 )
000083 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
000084 cff8      	RJMP _0xA
                 _0xB:
                 ; 0000 001C }
000085 c023      	RJMP _0x2000001
                 ;
                 ;////////////////////////////////////////
                 ;void move_cw_motY(unsigned int revolutions)
                 ; 0000 0020 {
                 _move_cw_motY:
                 ; 0000 0021  int i=0;
                 ; 0000 0022  for (i=0;i<revolutions;i++)
000086 d065      	RCALL SUBOPT_0x0
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0xD:
000087 d06b      	RCALL SUBOPT_0x1
000088 f420      	BRSH _0xE
                 ; 0000 0023  {
                 ; 0000 0024   PORTC=control_array_half_MotY[i%8];
000089 d086      	RCALL SUBOPT_0x4
                 ; 0000 0025   delay_ms(5);
                 ; 0000 0026  }
                +
00008a 5f0f     +SUBI R16 , LOW ( - 1 )
00008b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00008c cffa      	RJMP _0xD
                 _0xE:
                 ; 0000 0027 }
00008d c01b      	RJMP _0x2000001
                 ;void move_ccw_motY(unsigned int revolutions)
                 ; 0000 0029 {
                 _move_ccw_motY:
                 ; 0000 002A  int i;
                 ; 0000 002B  for (i=revolutions;i>0;i--)
00008e d07c      	RCALL SUBOPT_0x3
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x10:
00008f 2400      	CLR  R0
000090 1600      	CP   R0,R16
000091 0601      	CPC  R0,R17
000092 f424      	BRGE _0x11
                 ; 0000 002C  {
                 ; 0000 002D   PORTC=control_array_half_MotY[i%8];
000093 d07c      	RCALL SUBOPT_0x4
                 ; 0000 002E   delay_ms(5);
                 ; 0000 002F  }
                +
000094 5001     +SUBI R16 , LOW ( 1 )
000095 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
000096 cff8      	RJMP _0x10
                 _0x11:
                 ; 0000 0030 }
000097 c011      	RJMP _0x2000001
                 ;////////////////////////////////////////
                 ;void move_cw_motX(unsigned int revolutions)
                 ; 0000 0033 {
                 _move_cw_motX:
                 ; 0000 0034  int i=0;
                 ; 0000 0035  for (i=0;i<revolutions;i++)
000098 d053      	RCALL SUBOPT_0x0
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x13:
000099 d059      	RCALL SUBOPT_0x1
00009a f420      	BRSH _0x14
                 ; 0000 0036  {
                 ; 0000 0037   PORTA=control_array_half_MotX[i%8];
00009b d083      	RCALL SUBOPT_0x5
                 ; 0000 0038   delay_ms(2);
                 ; 0000 0039  }
                +
00009c 5f0f     +SUBI R16 , LOW ( - 1 )
00009d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00009e cffa      	RJMP _0x13
                 _0x14:
                 ; 0000 003A }
00009f c009      	RJMP _0x2000001
                 ;void move_ccw_motX(unsigned int revolutions)
                 ; 0000 003C {
                 _move_ccw_motX:
                 ; 0000 003D  int i;
                 ; 0000 003E  for (i=revolutions;i>0;i--)
0000a0 d06a      	RCALL SUBOPT_0x3
                 ;	revolutions -> Y+2
                 ;	i -> R16,R17
                 _0x16:
0000a1 2400      	CLR  R0
0000a2 1600      	CP   R0,R16
0000a3 0601      	CPC  R0,R17
0000a4 f424      	BRGE _0x17
                 ; 0000 003F  {
                 ; 0000 0040   PORTA=control_array_half_MotX[i%8];
0000a5 d079      	RCALL SUBOPT_0x5
                 ; 0000 0041   delay_ms(2);
                 ; 0000 0042  }
                +
0000a6 5001     +SUBI R16 , LOW ( 1 )
0000a7 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000a8 cff8      	RJMP _0x16
                 _0x17:
                 ; 0000 0043 }
                 _0x2000001:
0000a9 8119      	LDD  R17,Y+1
0000aa 8108      	LDD  R16,Y+0
0000ab 9624      	ADIW R28,4
0000ac 9508      	RET
                 ;////////////////////////////////////////
                 ;void main(void)
                 ; 0000 0046 {
                 _main:
                 ; 0000 0047 // Declare your local variables here
                 ; 0000 0048 // Input/Output Ports initialization
                 ; 0000 0049 // Port A initialization
                 ; 0000 004A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 004B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 004C PORTA=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbeb      	OUT  0x1B,R30
                 ; 0000 004D DDRA=0x00;
0000af bbea      	OUT  0x1A,R30
                 ; 0000 004E 
                 ; 0000 004F // Port B initialization
                 ; 0000 0050 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0051 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0052 PORTB=0x00;
0000b0 bbe8      	OUT  0x18,R30
                 ; 0000 0053 DDRB=0x00;
0000b1 bbe7      	OUT  0x17,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port C initialization
                 ; 0000 0056 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0057 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0058 PORTC=0x00;
0000b2 bbe5      	OUT  0x15,R30
                 ; 0000 0059 DDRC=0xFF;
0000b3 efef      	LDI  R30,LOW(255)
0000b4 bbe4      	OUT  0x14,R30
                 ; 0000 005A 
                 ; 0000 005B // Port D initialization
                 ; 0000 005C // Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 005D // State7=1 State6=T State5=1 State4=1 State3=P State2=P State1=T State0=T
                 ; 0000 005E PORTD=0xBC;
0000b5 ebec      	LDI  R30,LOW(188)
0000b6 bbe2      	OUT  0x12,R30
                 ; 0000 005F DDRD=0xB0;
0000b7 ebe0      	LDI  R30,LOW(176)
0000b8 bbe1      	OUT  0x11,R30
                 ; 0000 0060 
                 ; 0000 0061 TCCR0=0x00;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bfe3      	OUT  0x33,R30
                 ; 0000 0062 TCNT0=0x00;
0000bb bfe2      	OUT  0x32,R30
                 ; 0000 0063 OCR0=0x00;
0000bc bfec      	OUT  0x3C,R30
                 ; 0000 0064 
                 ; 0000 0065 TCCR1A=0x00;
0000bd bdef      	OUT  0x2F,R30
                 ; 0000 0066 TCCR1B=0x00;
0000be bdee      	OUT  0x2E,R30
                 ; 0000 0067 TCNT1H=0x00;
0000bf bded      	OUT  0x2D,R30
                 ; 0000 0068 TCNT1L=0x00;
0000c0 bdec      	OUT  0x2C,R30
                 ; 0000 0069 ICR1H=0x00;
0000c1 bde7      	OUT  0x27,R30
                 ; 0000 006A ICR1L=0x00;
0000c2 bde6      	OUT  0x26,R30
                 ; 0000 006B OCR1AH=0x00;
0000c3 bdeb      	OUT  0x2B,R30
                 ; 0000 006C OCR1AL=0x00;
0000c4 bdea      	OUT  0x2A,R30
                 ; 0000 006D OCR1BH=0x00;
0000c5 bde9      	OUT  0x29,R30
                 ; 0000 006E OCR1BL=0x00;
0000c6 bde8      	OUT  0x28,R30
                 ; 0000 006F 
                 ; 0000 0070 ASSR=0x00;
0000c7 bde2      	OUT  0x22,R30
                 ; 0000 0071 TCCR2=0x00;
0000c8 bde5      	OUT  0x25,R30
                 ; 0000 0072 TCNT2=0x00;
0000c9 bde4      	OUT  0x24,R30
                 ; 0000 0073 OCR2=0x00;
0000ca bde3      	OUT  0x23,R30
                 ; 0000 0074 
                 ; 0000 0075 MCUCR=0x00;
0000cb bfe5      	OUT  0x35,R30
                 ; 0000 0076 MCUCSR=0x00;
0000cc bfe4      	OUT  0x34,R30
                 ; 0000 0077 
                 ; 0000 0078 TIMSK=0x00;
0000cd bfe9      	OUT  0x39,R30
                 ; 0000 0079 
                 ; 0000 007A // USART initialization
                 ; 0000 007B // USART disabled
                 ; 0000 007C UCSRB=0x00;
0000ce b9ea      	OUT  0xA,R30
                 ; 0000 007D 
                 ; 0000 007E ACSR=0x80;
0000cf e8e0      	LDI  R30,LOW(128)
0000d0 b9e8      	OUT  0x8,R30
                 ; 0000 007F SFIOR=0x00;
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 bfe0      	OUT  0x30,R30
                 ; 0000 0080 
                 ; 0000 0081 ADCSRA=0x00;
0000d3 b9e6      	OUT  0x6,R30
                 ; 0000 0082 
                 ; 0000 0083 SPCR=0x00;
0000d4 b9ed      	OUT  0xD,R30
                 ; 0000 0084 
                 ; 0000 0085 TWCR=0x00;
0000d5 bfe6      	OUT  0x36,R30
                 ; 0000 0086 PORTC=0xff;
0000d6 efef      	LDI  R30,LOW(255)
0000d7 bbe5      	OUT  0x15,R30
                 ; 0000 0087 
                 ; 0000 0088 while (1)
                 _0x18:
                 ; 0000 0089       {
                 ; 0000 008A 
                 ; 0000 008B        move_ccw_motY(530);
0000d8 d055      	RCALL SUBOPT_0x6
0000d9 dfb4      	RCALL _move_ccw_motY
                 ; 0000 008C        move_cw_motY(530);
0000da d053      	RCALL SUBOPT_0x6
0000db dfaa      	RCALL _move_cw_motY
                 ; 0000 008D        move_ccw_motX(530);
0000dc d051      	RCALL SUBOPT_0x6
0000dd dfc2      	RCALL _move_ccw_motX
                 ; 0000 008E        move_cw_motX(530);
0000de d04f      	RCALL SUBOPT_0x6
0000df dfb8      	RCALL _move_cw_motX
                 ; 0000 008F        move_cw_motZ(30);
0000e0 e1ee      	LDI  R30,LOW(30)
0000e1 e0f0      	LDI  R31,HIGH(30)
0000e2 93fa      	ST   -Y,R31
0000e3 93ea      	ST   -Y,R30
0000e4 df8f      	RCALL _move_cw_motZ
                 ; 0000 0090        move_ccw_motZ(30);
0000e5 e1ee      	LDI  R30,LOW(30)
0000e6 e0f0      	LDI  R31,HIGH(30)
0000e7 93fa      	ST   -Y,R31
0000e8 93ea      	ST   -Y,R30
0000e9 df92      	RCALL _move_ccw_motZ
                 ; 0000 0091       }
0000ea cfed      	RJMP _0x18
                 ; 0000 0092 }
                 _0x1B:
0000eb cfff      	RJMP _0x1B
                 
                 	.DSEG
                 _control_array_half_MotZ:
000160           	.BYTE 0x10
                 _control_array_half_MotY:
000170           	.BYTE 0x8
                 _control_array_half_MotX:
000178           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0000ec 931a      	ST   -Y,R17
0000ed 930a      	ST   -Y,R16
                +
0000ee e000     +LDI R16 , LOW ( 0 )
0000ef e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000f0 e000     +LDI R16 , LOW ( 0 )
0000f1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0000f3 81ea      	LDD  R30,Y+2
0000f4 81fb      	LDD  R31,Y+2+1
0000f5 170e      	CP   R16,R30
0000f6 071f      	CPC  R17,R31
0000f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2:
0000f8 01d8      	MOVW R26,R16
0000f9 e0e8      	LDI  R30,LOW(8)
0000fa e0f0      	LDI  R31,HIGH(8)
0000fb 940e 0156 	CALL __MODW21
0000fd e6a0      	LDI  R26,LOW(_control_array_half_MotZ)
0000fe e0b1      	LDI  R27,HIGH(_control_array_half_MotZ)
0000ff 0fee      	LSL  R30
000100 1fff      	ROL  R31
000101 0fae      	ADD  R26,R30
000102 1fbf      	ADC  R27,R31
000103 91ec      	LD   R30,X
000104 bbe5      	OUT  0x15,R30
000105 e0e3      	LDI  R30,LOW(3)
000106 e0f0      	LDI  R31,HIGH(3)
000107 93fa      	ST   -Y,R31
000108 93ea      	ST   -Y,R30
000109 940c 0133 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00010b 931a      	ST   -Y,R17
00010c 930a      	ST   -Y,R16
                +
00010d 810a     +LDD R16 , Y + 2
00010e 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
00010f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
000110 01d8      	MOVW R26,R16
000111 e0e8      	LDI  R30,LOW(8)
000112 e0f0      	LDI  R31,HIGH(8)
000113 940e 0156 	CALL __MODW21
000115 59e0      	SUBI R30,LOW(-_control_array_half_MotY)
000116 4ffe      	SBCI R31,HIGH(-_control_array_half_MotY)
000117 81e0      	LD   R30,Z
000118 bbe5      	OUT  0x15,R30
000119 e0e5      	LDI  R30,LOW(5)
00011a e0f0      	LDI  R31,HIGH(5)
00011b 93fa      	ST   -Y,R31
00011c 93ea      	ST   -Y,R30
00011d 940c 0133 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
00011f 01d8      	MOVW R26,R16
000120 e0e8      	LDI  R30,LOW(8)
000121 e0f0      	LDI  R31,HIGH(8)
000122 940e 0156 	CALL __MODW21
000124 58e8      	SUBI R30,LOW(-_control_array_half_MotX)
000125 4ffe      	SBCI R31,HIGH(-_control_array_half_MotX)
000126 81e0      	LD   R30,Z
000127 bbeb      	OUT  0x1B,R30
000128 e0e2      	LDI  R30,LOW(2)
000129 e0f0      	LDI  R31,HIGH(2)
00012a 93fa      	ST   -Y,R31
00012b 93ea      	ST   -Y,R30
00012c 940c 0133 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00012e e1e2      	LDI  R30,LOW(530)
00012f e0f2      	LDI  R31,HIGH(530)
000130 93fa      	ST   -Y,R31
000131 93ea      	ST   -Y,R30
000132 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000133 91e9      	ld   r30,y+
000134 91f9      	ld   r31,y+
000135 9630      	adiw r30,0
000136 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000137 ed80     +LDI R24 , LOW ( 0x7D0 )
000138 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000139 9701     +SBIW R24 , 1
00013a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00013b 95a8      	wdr
00013c 9731      	sbiw r30,1
00013d f7c9      	brne __delay_ms0
                 __delay_ms1:
00013e 9508      	ret
                 
                 __ANEGW1:
00013f 95f1      	NEG  R31
000140 95e1      	NEG  R30
000141 40f0      	SBCI R31,0
000142 9508      	RET
                 
                 __DIVW21U:
000143 2400      	CLR  R0
000144 2411      	CLR  R1
000145 e190      	LDI  R25,16
                 __DIVW21U1:
000146 0faa      	LSL  R26
000147 1fbb      	ROL  R27
000148 1c00      	ROL  R0
000149 1c11      	ROL  R1
00014a 1a0e      	SUB  R0,R30
00014b 0a1f      	SBC  R1,R31
00014c f418      	BRCC __DIVW21U2
00014d 0e0e      	ADD  R0,R30
00014e 1e1f      	ADC  R1,R31
00014f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000150 60a1      	SBR  R26,1
                 __DIVW21U3:
000151 959a      	DEC  R25
000152 f799      	BRNE __DIVW21U1
000153 01fd      	MOVW R30,R26
000154 01d0      	MOVW R26,R0
000155 9508      	RET
                 
                 __MODW21:
000156 94e8      	CLT
000157 ffb7      	SBRS R27,7
000158 c004      	RJMP __MODW211
000159 95a0      	COM  R26
00015a 95b0      	COM  R27
00015b 9611      	ADIW R26,1
00015c 9468      	SET
                 __MODW211:
00015d fdf7      	SBRC R31,7
00015e dfe0      	RCALL __ANEGW1
00015f dfe3      	RCALL __DIVW21U
000160 01fd      	MOVW R30,R26
000161 f40e      	BRTC __MODW212
000162 dfdc      	RCALL __ANEGW1
                 __MODW212:
000163 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16L register use summary:
r0 :  18 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  16 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  15 r27:   7 r28:   2 r29:   1 r30:  93 r31:  32 
x  :   4 y  :  24 z  :   9 
Registers used: 16 out of 35 (45.7%)

ATmega16L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   3 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   4 cpc   :   4 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  25 ld    :   5 ldd   :   6 ldi   :  48 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   0 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  46 pop   :   0 push  :   0 rcall :  28 ret   :   9 
reti  :   0 rjmp  :  16 rol   :   4 ror   :   0 sbc   :   1 sbci  :   9 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   0 sts   :   0 sub   :   1 subi  :   8 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 41 out of 116 (35.3%)

ATmega16L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002c8    660     52    712   16384   4.3%
[.dseg] 0x000060 0x000180      0     32     32    1119   2.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
